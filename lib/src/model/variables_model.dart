import 'package:codelessly_api/codelessly_api.dart';
import 'package:collection/collection.dart';
import 'package:equatable/equatable.dart';
import 'package:json_annotation/json_annotation.dart';

part 'variables_model.g.dart';

enum VariableType {
  integer,
  text,
  decimal,
  boolean,
  list,
}

extension VariableTypeExt on VariableType {
  String get name {
    switch (this) {
      case VariableType.integer:
        return 'Integer';
      case VariableType.text:
        return 'Text';
      case VariableType.decimal:
        return 'Decimal';
      case VariableType.boolean:
        return 'Boolean';
      case VariableType.list:
        return 'List';
    }
  }
}

/// Store information of a variable. [id] must not be empty when creating a
/// new variable.
/// Comparable allows to compare variables by name. It is helpful in sorting.
@JsonSerializable()
class VariableData extends Comparable<VariableData>
    with EquatableMixin, SerializableMixin {
  /// This is generated by AutoID.autoID for a unique(mostly) ID.
  final String id;
  final String name;
  final Set<String> nodes;

  /// Default value this variable. This can be an empty string if no value is
  /// explicitly provided by the user.
  final String value;
  final VariableType type;

  /// This denotes whether the variable is used anywhere or not. The system
  /// can't determine this automatically so an update method must be called
  /// on the corresponding scope to update this value. This is primarily used
  /// for REST API as it is easier to gather info about usages. It is not
  /// necessary update this for editor variables as it is yet not
  /// intended for it.
  bool isUsed;

  VariableData({
    required this.id,
    required this.name,
    this.value = '',
    this.isUsed = true,
    this.type = VariableType.text,
    Set<String>? nodes,
  }) : nodes = nodes ?? <String>{};

  VariableData copyWith({
    String? id,
    String? name,
    String? value,
    VariableType? type,
    bool? isUsed,
    Set<String>? nodes,
  }) =>
      VariableData(
        id: id ?? this.id,
        name: name ?? this.name,
        value: value ?? this.value,
        type: type ?? this.type,
        isUsed: isUsed ?? this.isUsed,
        nodes: nodes ?? this.nodes,
      );

  @override
  List<Object?> get props => [id, name, value, type, nodes];

  @override
  int compareTo(VariableData other) => name.compareTo(other.name);

  factory VariableData.fromJson(Map<String, dynamic> json) =>
      _$VariableDataFromJson(json);

  @override
  Map<String, dynamic> toJson() => _$VariableDataToJson(this);

  /// Allows to convert a [VariableData] into [CanvasVariableData] with
  /// given [canvasId].
  CanvasVariableData withCanvas(String canvasId) => CanvasVariableData(
        id: id,
        canvasId: canvasId,
        name: name,
        value: value,
        type: type,
        isUsed: isUsed,
        nodes: nodes,
      );

  /// Converts [value] to given type [T]. This will fail if type conversion fails.
  T? typedValue<T>() {
    if (value.isEmpty) return null;
    if (T == int) {
      return int.parse(value) as T;
    } else if (T == double) {
      return double.parse(value) as T;
    } else if (T == bool) {
      return (value.toLowerCase() == 'true') as T;
    } else if (T == String) {
      return value as T;
    } else if (T == List) {
      // TODO: implement type conversion.
      throw UnimplementedError('Not Implemented');
    } else {
      throw Exception('Unsupported type: $T');
    }
  }

  /// Converts [value] to given [type]. Returns null in can't be converted.
  dynamic toTyped() {
    switch (type) {
      case VariableType.integer:
        return int.tryParse(value);
      case VariableType.text:
        return value;
      case VariableType.decimal:
        return double.tryParse(value);
      case VariableType.boolean:
        return value.toLowerCase() == 'true'
            ? true
            : value.toLowerCase() == 'false'
                ? false
                : null;
      case VariableType.list:
        // TODO: implement type conversion.
        throw UnimplementedError('Not Implemented');
    }
  }
}

/// Contains all the variables associated with a project.
@JsonSerializable()
class ProjectVariables {
  final Map<String, VariableData> globalVariables;
  @JsonKey(toJson: pageVariablesToJson, fromJson: pageVariablesFromJson)
  final List<PageVariables> pageVariables;
  final String id;
  final String owner;
  @JsonKey(toJson: dateToJson, fromJson: jsonToDate)
  final DateTime lastUpdated;

  ProjectVariables({
    required this.id,
    this.owner = '',
    Map<String, VariableData>? globalVariables,
    List<PageVariables>? pageVariables,
    DateTime? lastUpdated,
  })  : lastUpdated = lastUpdated ?? DateTime.now(),
        globalVariables = globalVariables ?? {},
        pageVariables = pageVariables ?? [];

  factory ProjectVariables.fromJson(Map<String, dynamic> json) =>
      _$ProjectVariablesFromJson(json);

  Map<String, dynamic> toJson() => _$ProjectVariablesToJson(this)..remove('id');

  ProjectVariables copyWidth({
    String? id,
    Map<String, VariableData>? globalVariables,
    List<PageVariables>? pageVariables,
    String? projectId,
    String? owner,
    DateTime? lastUpdated,
  }) =>
      ProjectVariables(
        id: id ?? this.id,
        globalVariables: globalVariables ?? this.globalVariables,
        pageVariables: pageVariables ?? this.pageVariables,
        owner: owner ?? this.owner,
        lastUpdated: lastUpdated ?? this.lastUpdated,
      );

  /// Allows to access page variables by page id.
  PageVariables? operator [](String pageId) {
    return pageVariables.firstWhereOrNull((element) => element.id == pageId);
  }

  /// Allows to assign page variables by page id.
  void operator []=(String pageId, PageVariables value) {
    final index = pageVariables.indexWhere((element) => element.id == pageId);
    if (index == -1) {
      pageVariables.add(value);
      return;
    }
    pageVariables[index] = value;
  }
}

/// Contains all the variables associated with a page inside a project.
@JsonSerializable()
class PageVariables with EquatableMixin {
  final String id;
  @JsonKey(toJson: canvasVariablesToJson, fromJson: canvasVariablesFromJson)
  final List<CanvasVariables> variables;

  PageVariables({
    required this.id,
    required this.variables,
  });

  PageVariables copyWith({
    String? id,
    String? canvasID,
    List<CanvasVariables>? variables,
  }) =>
      PageVariables(
        id: id ?? this.id,
        variables: variables ?? this.variables,
      );

  @override
  List<Object?> get props => [id, variables];

  factory PageVariables.fromJson(Map<String, dynamic> json) =>
      _$PageVariablesFromJson(json);

  Map<String, dynamic> toJson() => _$PageVariablesToJson(this)..remove('id');

  /// Allows to access canvas variables by canvas id.
  CanvasVariables? operator [](String canvasId) {
    return variables.firstWhereOrNull((element) => element.id == canvasId);
  }

  /// Allows to assign canvas variables by canvas id.
  void operator []=(String canvasId, CanvasVariables value) {
    final index = variables.indexWhere((element) => element.id == canvasId);
    if (index == -1) {
      variables.add(value);
      return;
    }
    variables[index] = value;
  }
}

/// Contains all the variables associated with a canvas inside a page.
@JsonSerializable()
class CanvasVariables with EquatableMixin {
  final String id;
  final Map<String, CanvasVariableData> variables;

  CanvasVariables({
    required this.id,
    required this.variables,
  });

  CanvasVariables copyWith({
    String? pageID,
    String? id,
    Map<String, CanvasVariableData>? variables,
  }) =>
      CanvasVariables(
        id: id ?? this.id,
        variables: variables ?? this.variables,
      );

  @override
  List<Object?> get props => [id, variables];

  factory CanvasVariables.fromJson(Map<String, dynamic> json) {
    final Map<String, CanvasVariableData> variables = {
      for (final entry in json['variables'].values)
        entry['id']: CanvasVariableData.fromJson({
          'canvasId': json['id'],
          ...entry,
        })
    };
    return CanvasVariables(id: json['id'], variables: variables);
  }

  Map<String, dynamic> toJson() => _$CanvasVariablesToJson(this)..remove('id');

  /// Allows to access canvas variables by variable id.
  CanvasVariableData? operator [](String variableId) {
    return variables[variableId];
  }

  /// Allows to assign canvas variables by variable id.
  void operator []=(String variableId, CanvasVariableData value) {
    variables[variableId] = value;
  }
}

/// A variable that is scoped to a canvas.
@JsonSerializable()
class CanvasVariableData extends VariableData {
  final String canvasId;

  CanvasVariableData({
    required super.id,
    required this.canvasId,
    required super.name,
    required super.type,
    super.value,
    super.isUsed,
    super.nodes,
  });

  @override
  CanvasVariableData copyWith({
    String? name,
    String? value,
    VariableType? type,
    String? id,
    bool? isUsed,
    String? canvasId,
    Set<String>? nodes,
  }) =>
      CanvasVariableData(
        name: name ?? this.name,
        value: value ?? this.value,
        type: type ?? this.type,
        id: id ?? this.id,
        canvasId: canvasId ?? this.canvasId,
        isUsed: isUsed ?? this.isUsed,
        nodes: nodes ?? this.nodes,
      );

  @override
  List<Object?> get props => [...super.props, canvasId];

  factory CanvasVariableData.fromJson(Map<String, dynamic> json) =>
      _$CanvasVariableDataFromJson(json);

  @override
  Map<String, dynamic> toJson() =>
      _$CanvasVariableDataToJson(this)..remove('canvasId');
}

/// Serializer for [PageVariables].
Map<String, dynamic> pageVariablesToJson(List<PageVariables> variables) {
  return {
    for (final variable in variables)
      variable.id: canvasVariablesToJson(variable.variables)
  };
}

/// Deserializer for [PageVariables].
List<PageVariables> pageVariablesFromJson(Map<String, dynamic> json) {
  return [
    for (final entry in json.entries)
      PageVariables.fromJson({
        'id': entry.key,
        'variables': entry.value,
      })
  ];
}

/// Serializer for [CanvasVariables].
Map<String, dynamic> canvasVariablesToJson(List<CanvasVariables> variables) {
  return {
    for (final variable in variables)
      variable.id:
          variable.variables.map((key, value) => MapEntry(key, value.toJson()))
  };
}

/// Deserializer for [CanvasVariables].
List<CanvasVariables> canvasVariablesFromJson(Map<String, dynamic> json) {
  return [
    for (final entry in json.entries)
      CanvasVariables.fromJson({'id': entry.key, 'variables': entry.value}),
  ];
}
