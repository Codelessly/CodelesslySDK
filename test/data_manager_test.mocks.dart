// Mocks generated by Mockito 5.4.0 from annotations
// in codelessly_sdk/test/data_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:typed_data' as _i6;

import 'package:codelessly_sdk/codelessly_sdk.dart' as _i5;
import 'package:codelessly_sdk/src/auth/auth_manager.dart' as _i8;
import 'package:codelessly_sdk/src/cache/cache_manager.dart' as _i2;
import 'package:codelessly_sdk/src/data/local_data_repository.dart' as _i7;
import 'package:codelessly_sdk/src/data/network_data_repository.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCacheManager_0 extends _i1.SmartFake implements _i2.CacheManager {
  _FakeCacheManager_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NetworkDataRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkDataRepository extends _i1.Mock
    implements _i3.NetworkDataRepository {
  @override
  _i4.Stream<_i5.SDKPublishModel?> streamPublishModel({
    required String? projectID,
    required bool? isPreview,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamPublishModel,
          [],
          {
            #projectID: projectID,
            #isPreview: isPreview,
          },
        ),
        returnValue: _i4.Stream<_i5.SDKPublishModel?>.empty(),
        returnValueForMissingStub: _i4.Stream<_i5.SDKPublishModel?>.empty(),
      ) as _i4.Stream<_i5.SDKPublishModel?>);
  @override
  _i4.Future<_i5.SDKPublishLayout?> downloadLayoutModel({
    required String? projectID,
    required String? layoutID,
    required bool? isPreview,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadLayoutModel,
          [],
          {
            #projectID: projectID,
            #layoutID: layoutID,
            #isPreview: isPreview,
          },
        ),
        returnValue: _i4.Future<_i5.SDKPublishLayout?>.value(),
        returnValueForMissingStub: _i4.Future<_i5.SDKPublishLayout?>.value(),
      ) as _i4.Future<_i5.SDKPublishLayout?>);
  @override
  _i4.Future<_i5.SDKPublishFont?> downloadFontModel({
    required String? projectID,
    required String? fontID,
    required bool? isPreview,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadFontModel,
          [],
          {
            #projectID: projectID,
            #fontID: fontID,
            #isPreview: isPreview,
          },
        ),
        returnValue: _i4.Future<_i5.SDKPublishFont?>.value(),
        returnValueForMissingStub: _i4.Future<_i5.SDKPublishFont?>.value(),
      ) as _i4.Future<_i5.SDKPublishFont?>);
  @override
  Set<_i4.Future<_i5.SDKPublishFont?>> downloadFontModels({
    required String? projectID,
    required Set<String>? fontIDs,
    required bool? isPreview,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadFontModels,
          [],
          {
            #projectID: projectID,
            #fontIDs: fontIDs,
            #isPreview: isPreview,
          },
        ),
        returnValue: <_i4.Future<_i5.SDKPublishFont?>>{},
        returnValueForMissingStub: <_i4.Future<_i5.SDKPublishFont?>>{},
      ) as Set<_i4.Future<_i5.SDKPublishFont?>>);
  @override
  Set<_i4.Future<_i5.SDKPublishLayout?>> downloadLayoutModels({
    required String? projectID,
    required Set<String>? layoutIDs,
    required bool? isPreview,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadLayoutModels,
          [],
          {
            #projectID: projectID,
            #layoutIDs: layoutIDs,
            #isPreview: isPreview,
          },
        ),
        returnValue: <_i4.Future<_i5.SDKPublishLayout?>>{},
        returnValueForMissingStub: <_i4.Future<_i5.SDKPublishLayout?>>{},
      ) as Set<_i4.Future<_i5.SDKPublishLayout?>>);
  @override
  _i4.Future<_i6.Uint8List?> downloadFontBytes({required String? url}) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadFontBytes,
          [],
          {#url: url},
        ),
        returnValue: _i4.Future<_i6.Uint8List?>.value(),
        returnValueForMissingStub: _i4.Future<_i6.Uint8List?>.value(),
      ) as _i4.Future<_i6.Uint8List?>);
}

/// A class which mocks [LocalDataRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataRepository extends _i1.Mock
    implements _i7.LocalDataRepository {
  @override
  _i2.CacheManager get cacheManager => (super.noSuchMethod(
        Invocation.getter(#cacheManager),
        returnValue: _FakeCacheManager_0(
          this,
          Invocation.getter(#cacheManager),
        ),
        returnValueForMissingStub: _FakeCacheManager_0(
          this,
          Invocation.getter(#cacheManager),
        ),
      ) as _i2.CacheManager);
  @override
  String modelCacheKey(bool? isPreview) => (super.noSuchMethod(
        Invocation.method(
          #modelCacheKey,
          [isPreview],
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String fontsCacheKey(bool? isPreview) => (super.noSuchMethod(
        Invocation.method(
          #fontsCacheKey,
          [isPreview],
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i5.SDKPublishModel? fetchPublishModel({required bool? isPreview}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPublishModel,
          [],
          {#isPreview: isPreview},
        ),
        returnValueForMissingStub: null,
      ) as _i5.SDKPublishModel?);
  @override
  _i6.Uint8List? fetchFontBytes({
    required String? fontID,
    required bool? isPreview,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchFontBytes,
          [],
          {
            #fontID: fontID,
            #isPreview: isPreview,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i6.Uint8List?);
  @override
  _i4.Future<void> savePublishModel({
    required _i5.SDKPublishModel? model,
    required bool? isPreview,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #savePublishModel,
          [],
          {
            #model: model,
            #isPreview: isPreview,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> saveFontBytes({
    required String? fontID,
    required _i6.Uint8List? bytes,
    required bool? isPreview,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveFontBytes,
          [],
          {
            #fontID: fontID,
            #bytes: bytes,
            #isPreview: isPreview,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  void deletePublishLayout({
    required String? layoutID,
    required bool? isPreview,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #deletePublishLayout,
          [],
          {
            #layoutID: layoutID,
            #isPreview: isPreview,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void deleteFontBytes({
    required String? fontID,
    required bool? isPreview,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #deleteFontBytes,
          [],
          {
            #fontID: fontID,
            #isPreview: isPreview,
          },
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CacheManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheManager extends _i1.Mock implements _i2.CacheManager {
  @override
  _i4.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<void> store(
    String? key,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #store,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  T get<T>(
    String? key, {
    T Function(Map<String, dynamic>)? decode,
  }) =>
      throw UnsupportedError(
          r'"get" cannot be used without a mockito fallback generator.');
  @override
  bool isCached(String? key) => (super.noSuchMethod(
        Invocation.method(
          #isCached,
          [key],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i4.Future<void> delete(String? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> clearAll() => (super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> storeBytes(
    String? pathKey,
    String? name,
    _i6.Uint8List? bytes,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeBytes,
          [
            pathKey,
            name,
            bytes,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i6.Uint8List getBytes(
    String? pathKey,
    String? name,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBytes,
          [
            pathKey,
            name,
          ],
        ),
        returnValue: _i6.Uint8List(0),
        returnValueForMissingStub: _i6.Uint8List(0),
      ) as _i6.Uint8List);
  @override
  _i4.Future<bool> areBytesCached(
    String? pathKey,
    String? name,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #areBytesCached,
          [
            pathKey,
            name,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<void> deleteBytes(
    String? pathKey,
    String? name,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteBytes,
          [
            pathKey,
            name,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> purgeBytes(
    String? pathKey, {
    Iterable<String>? excludedFileNames = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #purgeBytes,
          [pathKey],
          {#excludedFileNames: excludedFileNames},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteAllByteData() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllByteData,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [AuthManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthManager extends _i1.Mock implements _i8.AuthManager {
  @override
  _i4.Stream<_i8.AuthData?> get authStream => (super.noSuchMethod(
        Invocation.getter(#authStream),
        returnValue: _i4.Stream<_i8.AuthData?>.empty(),
        returnValueForMissingStub: _i4.Stream<_i8.AuthData?>.empty(),
      ) as _i4.Stream<_i8.AuthData?>);
  @override
  _i4.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  bool isAuthenticated() => (super.noSuchMethod(
        Invocation.method(
          #isAuthenticated,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i4.Future<void> authenticate() => (super.noSuchMethod(
        Invocation.method(
          #authenticate,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void invalidate() => super.noSuchMethod(
        Invocation.method(
          #invalidate,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
